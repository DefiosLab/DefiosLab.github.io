<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>MQTT on Defios Lab.</title>
    <link>https://DefiosLab.github.io/tags/mqtt/</link>
    <description>Recent content in MQTT on Defios Lab.</description>
    <generator>Hugo</generator>
    <language>jp</language>
    <lastBuildDate>Tue, 20 Dec 2022 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://DefiosLab.github.io/tags/mqtt/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>M5Stackで始めるIoT開発入門〜学習リモコン〜</title>
      <link>https://DefiosLab.github.io/post/remote_contoroller_mqtt/</link>
      <pubDate>Tue, 20 Dec 2022 00:00:00 +0000</pubDate>
      <guid>https://DefiosLab.github.io/post/remote_contoroller_mqtt/</guid>
      <description>&lt;h1 id=&#34;1はじめに&#34;&gt;1．はじめに&lt;/h1&gt;&#xA;&lt;p&gt;本記事は、IoT開発初心者である私が&lt;strong&gt;M5Stackで学習リモコンを作成し、ネットワーク経由で家電を操作してみよう&lt;/strong&gt;という内容です。&lt;/p&gt;&#xA;&lt;p&gt;M5StackはWi-FiとBluetoothによる無線通信機能を備えたESP32や液晶ディスプレイ、microSDカードスロットなどの周辺機器がまとまった小型のマイコンモジュールです。ユニット(センサーなど)を接続することで簡単にセンサーから値を取得できます。この記事を通して、M5Stackでの開発やMQTTなど基本的なIoT開発の仕方を勉強するきっかけや参考になればいいと思います。&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;2開発環境と構成図&#34;&gt;2．開発環境と構成図&lt;/h1&gt;&#xA;&lt;p&gt;今回作成するシステムの構成図はこんな感じです。ただ、学習リモコンを作るだけではIoTにはならないので、ネットワーク経由でも操作できるようにしました。IoTでの通信といえばMQTTと聞いたので勉強も兼ねて実装していきたいと思います。&lt;/p&gt;&#xA;&lt;figure&gt;&lt;img src=&#34;https://DefiosLab.github.io/post/remote_contoroller_mqtt/IoT_system.png&#34;&#xA;    alt=&#34;システム構成図&#34; width=&#34;800px&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&#xA;&lt;p&gt;開発環境は以下の通りです。M5GO IoTスターターキットを購入すれば、IRセンサーの他にENVⅢ(温湿度・気圧)センサーなども付いてくるので初めてIoT開発する方にはおすすめです。前提として、Arduino IDEでのM5Stackの環境は整っていることとします。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;端末：M5GO (M5STACK BASICでもOK)&lt;/li&gt;&#xA;&lt;li&gt;センサー：IRセンサー(赤外線センサー)&lt;/li&gt;&#xA;&lt;li&gt;サーバー：Raspberry Pi 4 (Linuxの入ったPCなら代替可)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;3学習リモコン作成&#34;&gt;3．学習リモコン作成&lt;/h1&gt;&#xA;&lt;h2 id=&#34;31準備&#34;&gt;3.1．準備&lt;/h2&gt;&#xA;&lt;p&gt;最初に学習リモコンから作成していきたいと思います。まずは、&lt;code&gt;IRremoteESP8266&lt;/code&gt;のライブラリをインストールします。&lt;/p&gt;&#xA;&lt;h2 id=&#34;32受信編&#34;&gt;3.2．受信編&lt;/h2&gt;&#xA;&lt;p&gt;次に既存のリモコンから赤外線データを取得します。今回私は、電気をON・OFFするこちらのアイリスオオヤマ製のリモコンを使用します。&lt;/p&gt;&#xA;&lt;figure&gt;&lt;img src=&#34;https://DefiosLab.github.io/post/remote_contoroller_mqtt/IRIS.png&#34;&#xA;    alt=&#34;システム構成図&#34; width=&#34;300px&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&#xA;&lt;p&gt;まずは、&lt;code&gt;IRremoteESP8266&lt;/code&gt;のサンプルコードを取得します。&#xA;赤外線を受信するサンプルコードは、「ファイル」→「スケッチ例」→「IRremoteESP8266」の「IRrecvDumpV2」から取得できます。&lt;/p&gt;&#xA;&lt;figure&gt;&lt;img src=&#34;https://DefiosLab.github.io/post/remote_contoroller_mqtt/dump_sample.png&#34;&#xA;    alt=&#34;サンプルコード取得&#34; width=&#34;800px&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&#xA;&lt;p&gt;M5GOでは、受信するPIN番号が36、送信するPIN番号が26番です。なので、受信するPIN番号を36に変更する必要があります。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;uint16_t&lt;/span&gt; kRecvPin &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;36&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;変更したら、コンパイル＋書き込みを行い、シリアルモニターを開いてIRセンサーに向けてリモコンのボタンを押しデータ受信させます。今回は「ON・OFF」、「明るく」、「暗い」のデータを受信します。赤外線データを受信すると以下のようなにシリアルモニタに表示されるので&lt;code&gt;uint16_t raw_data[85]&lt;/code&gt;のメモを取ります。&#xA;&lt;figure&gt;&lt;img src=&#34;https://DefiosLab.github.io/post/remote_contoroller_mqtt/dump_result.png&#34;&#xA;    alt=&#34;受信結果&#34; width=&#34;800px&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&lt;/p&gt;&#xA;&lt;h2 id=&#34;33送信編&#34;&gt;3.3．送信編&lt;/h2&gt;&#xA;&lt;p&gt;赤外線データを受信したら、次に学習リモコンを作成します。現時点では、Web UIやMQTTの実装はしていないので、ボタンが押された場合データを送信するように実装します。&#xA;Aボタンが「切/入」、Bボタンが「明るく」、Cボタンが「暗く」のデータを送信するように実装していきます。&#xA;コードについては、コード内にコメントを書いたので説明は省略します。コンパイル＋書き込みを行い、実際に家電(今回は電気)を操作できたら学習リモコンは完成です！&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;M5Stack.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;IRremoteESP8266.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;IRsend.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define DATA_SIZE 85 &lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 送信する赤外線データのサイズ&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define TRANSMIT_CAPTURE_SIZE 38 &lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 周波数. 赤外線リモコンの仕様が38khzなので、38で固定&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; ir_send_pin &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;// 送信するPIN番号&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;IRsend &lt;span style=&#34;color:#a6e22e&#34;&gt;irsend&lt;/span&gt;(ir_send_pin);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 送信する赤外線データ&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;uint16_t&lt;/span&gt; on_off[&lt;span style=&#34;color:#ae81ff&#34;&gt;85&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#ae81ff&#34;&gt;2022&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1004&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;5584&lt;/span&gt;,... , &lt;span style=&#34;color:#ae81ff&#34;&gt;1494&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;532&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;512&lt;/span&gt;};  &lt;span style=&#34;color:#75715e&#34;&gt;// 切/入&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;uint16_t&lt;/span&gt; brightly[&lt;span style=&#34;color:#ae81ff&#34;&gt;85&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#ae81ff&#34;&gt;2050&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;978&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;5586&lt;/span&gt;,...,  &lt;span style=&#34;color:#ae81ff&#34;&gt;1550&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;480&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;508&lt;/span&gt;};  &lt;span style=&#34;color:#75715e&#34;&gt;// 明るく&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;uint16_t&lt;/span&gt; dark[&lt;span style=&#34;color:#ae81ff&#34;&gt;85&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#ae81ff&#34;&gt;2020&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1006&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;5578&lt;/span&gt;,...,  &lt;span style=&#34;color:#ae81ff&#34;&gt;488&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;516&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;536&lt;/span&gt;};  &lt;span style=&#34;color:#75715e&#34;&gt;// 暗く&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;setup&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// M5Stackの初期化&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  M5.&lt;span style=&#34;color:#a6e22e&#34;&gt;begin&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  M5.Power.&lt;span style=&#34;color:#a6e22e&#34;&gt;begin&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// 26番ピンの設定&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;pinMode&lt;/span&gt;(ir_send_pin, OUTPUT);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;digitalWrite&lt;/span&gt;(ir_send_pin, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;loop&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  M5.&lt;span style=&#34;color:#a6e22e&#34;&gt;update&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// 各ボタンが押された際に、それぞれの赤外線データを送信する&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (M5.BtnA.&lt;span style=&#34;color:#a6e22e&#34;&gt;wasPressed&lt;/span&gt;()) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    irsend.&lt;span style=&#34;color:#a6e22e&#34;&gt;sendRaw&lt;/span&gt;(on_off, DATA_SIZE, TRANSMIT_CAPTURE_SIZE);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  } &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (M5.BtnB.&lt;span style=&#34;color:#a6e22e&#34;&gt;wasPressed&lt;/span&gt;()) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    irsend.&lt;span style=&#34;color:#a6e22e&#34;&gt;sendRaw&lt;/span&gt;(brightly, DATA_SIZE, TRANSMIT_CAPTURE_SIZE);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  } &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (M5.BtnC.&lt;span style=&#34;color:#a6e22e&#34;&gt;wasPressed&lt;/span&gt;()) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    irsend.&lt;span style=&#34;color:#a6e22e&#34;&gt;sendRaw&lt;/span&gt;(dark, DATA_SIZE, TRANSMIT_CAPTURE_SIZE);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;&#xA;&lt;h1 id=&#34;4mqtt&#34;&gt;4．MQTT&lt;/h1&gt;&#xA;&lt;p&gt;MQTT(Message Queue Telemetry Transport)とは、IoT向けのメッセージングプロトコルです。publish/subscribeモデルという仕組みに基づいており、双方向通信可能、非常に軽量で効率的なためIoTでの通信で用いられます。&#xA;publish/subscribeモデルでは、メッセージの送信側(Publisher)と受信側(Subscriber)の間にMQTTサーバー(Broker)が入ってメッセージを扱います。&lt;br&gt;&#xA;今回はMQTT Brokerとして、OSSであるMosquittoをRaspBerry Piにインストールしていきます。また、動作確認もしたいのでクライアントツールもインストールします。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
