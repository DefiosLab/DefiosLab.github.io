<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>LLM on Defios Lab.</title>
    <link>https://DefiosLab.github.io/categories/llm/</link>
    <description>Recent content in LLM on Defios Lab.</description>
    <generator>Hugo</generator>
    <language>jp</language>
    <lastBuildDate>Mon, 14 Apr 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://DefiosLab.github.io/categories/llm/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>ゲーム開発者向け生成AI統合ミドルウェア「ValorAI」の紹介</title>
      <link>https://DefiosLab.github.io/post/valorai-alpha/</link>
      <pubDate>Mon, 14 Apr 2025 00:00:00 +0000</pubDate>
      <guid>https://DefiosLab.github.io/post/valorai-alpha/</guid>
      <description>&lt;h1 id=&#34;1valoraiとは&#34;&gt;1．ValorAIとは&lt;/h1&gt;&#xA;&lt;p&gt;ChatGPTに代表される文章生成AIをコストを抑えて簡単にゲームに搭載可能にするミドルウェアです。&lt;br&gt;&#xA;&lt;strong&gt;ノーコードでAI NPC/AIシステムを開発し、UnityやUnrealEngine等のゲームエンジン上で動作させることができます。&lt;/strong&gt;&lt;br&gt;&#xA;クラウドの推論処理に加えてオンデバイスでの高速なローカルLLMにも対応しており、&lt;strong&gt;完全サーバレスな生成AIゲームを開発することも可能です。&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;ValorAIは&lt;strong&gt;GeneratorとRuntime&lt;/strong&gt; の二つのソフトウェアで構成されています。GeneratorはGUIアプリケーションです。Node-REDやDify等のようにノーコードでAIを制御することができます。&lt;br&gt;&#xA;Runtimeはゲームエンジン上で動作するライブラリです。Generatorで開発したAIモデルを動作させることができます。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;今年4月にValorAI α版を公開しました。&lt;/strong&gt;&lt;br&gt;&#xA;&lt;a href=&#34;https://defios.jp/valorai/&#34;&gt;https://defios.jp/valorai/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;本記事ではこのα版を用いてValorAIの機能の一部をご紹介します。&lt;/p&gt;&#xA;&lt;h1 id=&#34;2-ai-npcを作ってみよう&#34;&gt;2. AI NPCを作ってみよう&lt;/h1&gt;&#xA;&lt;p&gt;例としてValorAIを使ってAI NPCを作ってみましょう。&lt;br&gt;&#xA;&lt;strong&gt;「昨日起こった殺人事件の犯人を村人に聞き込みをして特定するゲーム」&lt;/strong&gt; というお題で村人NPCを作ります。&lt;/p&gt;&#xA;&lt;p&gt;※ツールの詳細な使い方は本記事では割愛しています。α版同封のチュートリアルをご一読ください&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Generator&lt;/strong&gt; を起動すると以下の画面が表示されます。&lt;/p&gt;&#xA;&lt;figure&gt;&lt;img src=&#34;https://DefiosLab.github.io/post/valorai-alpha/valorai-init.png&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&#xA;&lt;p&gt;左上のプルダウンメニューからノードを追加できます。&lt;br&gt;&#xA;α版で対応しているノードは以下の通りです。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Input&lt;/strong&gt; : 入力を受け取るノードです。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;LLM&lt;/strong&gt; : 設定や入力を元に文章を生成します。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Question Classifier&lt;/strong&gt; : 入力が何に関する文章か分類します&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Answer&lt;/strong&gt; : 定型文を出力します&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Knowledge Search&lt;/strong&gt; : 辞書データから入力に類似する文章を出力します(RAG機能)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;まず初めに以下のようにノードを繋いで簡単なNPCを作成します。&lt;/p&gt;&#xA;&lt;figure&gt;&lt;img src=&#34;https://DefiosLab.github.io/post/valorai-alpha/simple-npc.png&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&#xA;&lt;p&gt;Inputノードに質問文章が渡され、左から線で接続されている順番でノードが実行されます。&lt;br&gt;&#xA;Question Classifierは質問内容によって分岐するノードです。事件に全く関係ない質問をAnswerノードに分岐させて定型文を返すようにしています。ここでは「・・・。(今は世間話をする気はないようだ・・・）」と返すようにしています。&lt;/p&gt;&#xA;&lt;p&gt;LLMノードにはSystemPromptとUserPromptの二つを設定できます。SystemPromptにはキャラクターの設定、UserPromptには入力の質問文を渡しています。&lt;br&gt;&#xA;SystemPromptには以下の設定を付与しています&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;【ゲーム内設定】&#xA;あなたは、ゲーム内の村に住むNPCの一人です。村には以下の10人の住民が存在します。&#xA;&#xA;&#xA;1.村長｜タケナカ シゲル（男性・50代）&#xA;2.宿屋の娘｜サクライ ミナ（女性・20代後半）&#xA;3.農夫｜イシダ ゴロウ（男性・40代）&#xA;4.薬師｜フジワラ トモエ（女性・30代半ば）&#xA;5.猟師｜オオタニ ケンジ（男性・20代後半）&#xA;6.旅の商人｜カワムラ シンゴ（男性・30代）&#xA;7.村の主婦｜ナカジマ アヤ（女性・30代後半）&#xA;8.女教師｜タカハシ ユキ（女性・30代前半）&#xA;9.木工職人｜スズキ タロウ（男性・40代）&#xA;10.会社員｜マツナガ ヒロキ（男性・20代後半）&#xA;&#xA;&#xA;事件に関するキーワードは次の9個です。&#xA;1.争う声&#xA;2.銃声&#xA;3.急ぎ足の影&#xA;4.消えた食事&#xA;5.短い悲鳴&#xA;6.いざこざ&#xA;7.薬の小瓶&#xA;8.震える手&#xA;9.乱れた髪&#xA;&#xA;&#xA;【ゲームの流れ】&#xA;主人公が村を訪れた翌日に殺人事件が発生します。被害者はフジワラ トモエです。&#xA;あなたは、事件の証言者として、200文字以内で証言してください。&#xA;事件に関するあなたが持っているキーワードがあります。カギ括弧を付けてキーワードを使用し証言に含めて下さい。また不自然にならないように文脈に組み込むこと。&#xA;&#xA;【あなたの設定】&#xA;あなたは以下に指定されるキャラクターを完璧に演じてください。設定はそのまま読み上げることはせずにキャラクターの設定として不自然にならないように演じてください。&#xA;あなたはサクライ ミナです。&#xA;宿屋の娘で両親の仕事を手伝っています。事件があった時はちょうどその日の仕事がひと段落し、自室で趣味の読書をしていました。&#xA;質問には昨日起こった事件にとても怖がっている様子で返答してください&#xA;持っているキーワード：争う声、銃声、短い悲鳴&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;これでNPCの設定ができました。&lt;br&gt;&#xA;Question ClassifierやLLMノードはクラウドまたはローカルのLLMモデルを内部で利用しています。今回はOpenAI社のgpt-4o-miniを使いました。&lt;br&gt;&#xA;作成したモデルはjson形式で保存されます。&lt;br&gt;&#xA;Unityのプロジェクトに配置して、以下のコードで動かすことができます。&lt;/p&gt;</description>
    </item>
    <item>
      <title>ゲームの世界にローカルLLMを！！LlamaCppUnityを公開しました</title>
      <link>https://DefiosLab.github.io/post/release_llamacppunity/</link>
      <pubDate>Thu, 16 May 2024 00:00:00 +0000</pubDate>
      <guid>https://DefiosLab.github.io/post/release_llamacppunity/</guid>
      <description>&lt;h1 id=&#34;1はじめに&#34;&gt;1．はじめに&lt;/h1&gt;&#xA;&lt;p&gt;近年、LLM（Large Language Models）の利活用が進んでおり、その応用範囲は広がっています。その中でゲーム開発において、LLMを活用したいと考える方も多いと思います。例えばリアルなNPCやプレイヤーの行動に応じた自由度の高い反応を実現したい等。&lt;/p&gt;&#xA;&lt;p&gt;LLMをアプリに組み込む場合、ChatGPTを筆頭としたクラウドLLMと通信して行うのが主流になっていますが、生成量に応じた課金が必要でゲームへの導入には障壁があります。&lt;/p&gt;&#xA;&lt;p&gt;そこで、デバイス内でLLMの推論処理を完結するRuntimeライブラリ、 &lt;strong&gt;LlamaCppUnity&lt;/strong&gt;を公開しました。&lt;/p&gt;&#xA;&lt;div class=&#34;iframely-embed&#34;&gt;&lt;div class=&#34;iframely-responsive&#34; style=&#34;height: 140px; padding-bottom: 0;&#34;&gt;&lt;a href=&#34;https://github.com/DefiosLab/LlamaCppUnity&#34; data-iframely-url=&#34;//iframely.net/O8gKEAS?card=small&#34;&gt;&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;script async src=&#34;//iframely.net/embed.js&#34;&gt;&lt;/script&gt;&#xA;&lt;br&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;2-llamacppunity&#34;&gt;2. LlamaCppUnity&lt;/h1&gt;&#xA;&lt;p&gt;LlamaCppUnityは&lt;a href=&#34;https://github.com/ggerganov/llama.cpp&#34;&gt;llama.cpp&lt;/a&gt;をバックエンドとしたLLM Runtimeライブラリです。&lt;br&gt;&#xA;llama.cppの機能をそのまま使えるので、&lt;strong&gt;量子化やGPGPU/SIMD実行, クロスプラットフォーム(Windows, Mac, Android)に対応&lt;/strong&gt;しています。&lt;br&gt;&#xA;MIT Licenseで公開しているので再配布・改造も自由です。(Contribution大歓迎です！)&lt;/p&gt;&#xA;&lt;p&gt;↓は本ライブラリの紹介動画です。&lt;/p&gt;&#xA;&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/YAPNvy4gD-Y?si=mJwg1lKqafEXValI&#34; title=&#34;YouTube video player&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&#34; referrerpolicy=&#34;strict-origin-when-cross-origin&#34; allowfullscreen&gt;&lt;/iframe&gt;&#xA;&lt;p&gt;こちらの動画内で使われているアプリは今回デモ用に作った&lt;strong&gt;ユニティちゃんと簡単な会話ができるアプリ&lt;/strong&gt;です。&lt;br&gt;&#xA;以下に公開していますので興味がある方はぜひ触ってみてください！（Windows, Android対応）&lt;br&gt;&#xA;モデルは&lt;code&gt;ELYZA-japanese-Llama-2-7bの2bit量子化モデル&lt;/code&gt;を使っています。&lt;/p&gt;&#xA;&lt;div class=&#34;iframely-embed&#34;&gt;&lt;div class=&#34;iframely-responsive&#34; style=&#34;height: 140px; padding-bottom: 0;&#34;&gt;&lt;a href=&#34;https://github.com/DefiosLab/LlamaCppUnity_DEMO&#34; data-iframely-url=&#34;//iframely.net/qhd6SYA?card=small&#34;&gt;&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;script async src=&#34;//iframely.net/embed.js&#34;&gt;&lt;/script&gt;&#xA;&lt;br&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;3-サンプルコード&#34;&gt;3. サンプルコード&lt;/h1&gt;&#xA;&lt;p&gt;推論を動かすには以下のコードで簡単に実行できます。Token毎に生成結果を返す&lt;code&gt;Stream&lt;/code&gt;にも対応しています。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; LlamaCppUnity;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;LlamaSample&lt;/span&gt; : MonoBehaviour&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Start()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Llama test = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Llama(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;lt;path/to/gguf&amp;gt;&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; result = test.Run(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Q: Name the planets in the solar system? A: &amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;//Output example: &amp;#34;1. Venus, 2. Mercury, 3. Mars,&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;//Stream Mode&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; text &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; test.RunStream(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Q: Name the planets in the solar system? A: &amp;#34;&lt;/span&gt;))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      Debug.Log(text);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;後ほどデモアプリのソースコードも公開予定です。（アセットをおしゃれにした結果、ライセンス上そのままソースを公開できないアプリになってしまいました&amp;hellip;推論部分だけを抽出したサンプルアプリにする予定です。）&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
