<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Defios Lab.</title>
    <link>https://DefiosLab.github.io/</link>
    <description>Recent content on Defios Lab.</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>jp</language>
    <lastBuildDate>Sat, 24 Dec 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://DefiosLab.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Universal IntrinsicsでSIMDプログラミング</title>
      <link>https://DefiosLab.github.io/post/cv-universal-intrinsic/</link>
      <pubDate>Sat, 24 Dec 2022 00:00:00 +0000</pubDate>
      
      <guid>https://DefiosLab.github.io/post/cv-universal-intrinsic/</guid>
      <description>岩手県立大学アドベントカレンダー18日目の記事です（大遅刻）
自己紹介 はじめまして近藤鯛貴です。
岩手県立大学ソフトウェア情報学研究科の博士課程に在学しつつ、Defios株式会社というベンチャー企業を経営しています。
大学ではラズパイとかJetsonなどの小型コンピュータを対象に高速化の研究を行っており、会社ではAI/IoT分野を中心に受託開発やコンサルティング業務を行ってます。
最近Defiosで技術ブログを立ち上げました。せっかくなのでこちらから投稿します。
1．はじめに 現代の大体のCPUではSIMD（Single Instruction Multiple Data)命令が実行可能です。SIMDとは一つの命令で複数のデータを処理する並列化形態です。上手く使うことでソフトウェアを高速化することが出来ます。
しかし、プロセッサのアーキテクチャや製品種類によって対応しているSIMDのbit幅や命令セットが異なり、様々なコンピュータ上でSIMDを活用するアプリケーションを実装するのは少し厄介です。
ふと、画像処理ライブラリであるOpenCVのSIMD対応がどうなっているのか気になって調べたところ以下の記事を見つけました。
どうやら、OpenCVではUniversal Intrinsicというライブラリを用いてSIMDアーキテクチャの差異を吸収しているようです。
本記事ではこのUniversal Intrinsic(以下UI)の使い方と簡単な実装例を紹介します。
2．使い方 普通にOpenCVをインストールして、&amp;lt;opencv2/core/simd_intrinsics.hpp&amp;gt;をincludeすればUIを使うことが出来ます。
SIMDが有効になっているか、どのbit幅が使えるかはOpenCVのサンプルのsimd_basic.cppを実行することで確認できます。
以下AVX2環境でのsimd_basic.cppの実行結果
================== macro dump =================== CV_SIMD is defined: 1 CV_SIMD_WIDTH is defined: 32 CV_SIMD128 is defined: 1 CV_SIMD256 is defined: 1 CV_SIMD512 is defined: 0 CV_SIMD_64F is defined: 1 CV_SIMD_FP16 is defined: 0 ================= sizeof checks ================= sizeof(v_uint8) = 32 sizeof(v_int32) = 32 sizeof(v_float32) = 32 ================== arithm check ================= (vx_setall_u8(10) + vx_setall_u8(45)).</description>
    </item>
    
    <item>
      <title>M5Stackで始めるIoT開発入門〜学習リモコン〜</title>
      <link>https://DefiosLab.github.io/post/remote_contoroller_mqtt/</link>
      <pubDate>Tue, 20 Dec 2022 00:00:00 +0000</pubDate>
      
      <guid>https://DefiosLab.github.io/post/remote_contoroller_mqtt/</guid>
      <description>1．はじめに 本記事は、IoT開発初心者である私がM5Stackで学習リモコンを作成し、ネットワーク経由で家電を操作してみようという内容です。
M5StackはWi-FiとBluetoothによる無線通信機能を備えたESP32や液晶ディスプレイ、microSDカードスロットなどの周辺機器がまとまった小型のマイコンモジュールです。ユニット(センサーなど)を接続することで簡単にセンサーから値を取得できます。この記事を通して、M5Stackでの開発やMQTTなど基本的なIoT開発の仕方を勉強するきっかけや参考になればいいと思います。
2．開発環境と構成図 今回作成するシステムの構成図はこんな感じです。ただ、学習リモコンを作るだけではIoTにはならないので、ネットワーク経由でも操作できるようにしました。IoTでの通信といえばMQTTと聞いたので勉強も兼ねて実装していきたいと思います。
開発環境は以下の通りです。M5GO IoTスターターキットを購入すれば、IRセンサーの他にENVⅢ(温湿度・気圧)センサーなども付いてくるので初めてIoT開発する方にはおすすめです。前提として、Arduino IDEでのM5Stackの環境は整っていることとします。
端末：M5GO (M5STACK BASICでもOK) センサー：IRセンサー(赤外線センサー) サーバー：Raspberry Pi 4 (Linuxの入ったPCなら代替可) 3．学習リモコン作成 3.1．準備 最初に学習リモコンから作成していきたいと思います。まずは、IRremoteESP8266のライブラリをインストールします。
3.2．受信編 次に既存のリモコンから赤外線データを取得します。今回私は、電気をON・OFFするこちらのアイリスオオヤマ製のリモコンを使用します。
まずは、IRremoteESP8266のサンプルコードを取得します。 赤外線を受信するサンプルコードは、「ファイル」→「スケッチ例」→「IRremoteESP8266」の「IRrecvDumpV2」から取得できます。
M5GOでは、受信するPIN番号が36、送信するPIN番号が26番です。なので、受信するPIN番号を36に変更する必要があります。
const uint16_t kRecvPin = 36; 変更したら、コンパイル＋書き込みを行い、シリアルモニターを開いてIRセンサーに向けてリモコンのボタンを押しデータ受信させます。今回は「ON・OFF」、「明るく」、「暗い」のデータを受信します。赤外線データを受信すると以下のようなにシリアルモニタに表示されるのでuint16_t raw_data[85]のメモを取ります。 3.3．送信編 赤外線データを受信したら、次に学習リモコンを作成します。現時点では、Web UIやMQTTの実装はしていないので、ボタンが押された場合データを送信するように実装します。 Aボタンが「切/入」、Bボタンが「明るく」、Cボタンが「暗く」のデータを送信するように実装していきます。 コードについては、コード内にコメントを書いたので説明は省略します。コンパイル＋書き込みを行い、実際に家電(今回は電気)を操作できたら学習リモコンは完成です！
#include &amp;lt;M5Stack.h&amp;gt; #include &amp;lt;IRremoteESP8266.h&amp;gt; #include &amp;lt;IRsend.h&amp;gt; #define DATA_SIZE 85 // 送信する赤外線データのサイズ #define TRANSMIT_CAPTURE_SIZE 38 // 周波数. 赤外線リモコンの仕様が38khzなので、38で固定 int ir_send_pin = 26; // 送信するPIN番号 IRsend irsend(ir_send_pin); // 送信する赤外線データ uint16_t on_off[85] = {2022, 1004, 5584,... , 1494, 532, 512}; // 切/入 uint16_t brightly[85] = {2050, 978, 5586,.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://DefiosLab.github.io/archives/</link>
      <pubDate>Tue, 01 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>https://DefiosLab.github.io/archives/</guid>
      <description></description>
    </item>
    
    <item>
      <title>このブログについて</title>
      <link>https://DefiosLab.github.io/post/about/</link>
      <pubDate>Tue, 01 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>https://DefiosLab.github.io/post/about/</guid>
      <description>Defios株式会社 DefiosLab所長のTaisyoです。
普段AIやIoT関係の開発を行う弊社の社員が、技術から遊び、岩手での仕事の様子などあらゆるテーマについて自由に書く何でもブログを開設しました。
これから不定期に記事を追加していく予定です。
記事についてのコメントは#Defios_Labのハッシュタグで、TwitterやFacebookに投稿してもらえると嬉しいです！
ブログのデザインはレトロなPCやゲームが好きな私のこだわりのデザインですが、ちょっと見づらいかも知れませんね&amp;hellip;
・・・そのようなWebデザインに関する意見もお待ちしてます！
This blog is written by an employee of Defios Corporation, an IT company that develops AI and IoT.
I write articles mainly about technology.
I also write articles about Iwate Prefecture in Japan, where the company&amp;rsquo;s office is located.
― Director of DefiosLaboratory Takeda Hiromasa</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://DefiosLab.github.io/about/</link>
      <pubDate>Sat, 01 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>https://DefiosLab.github.io/about/</guid>
      <description>このブログは、Defios株式会社の様々な 挑戦~Defio~ の記録を書いているブログです。
と、かっこよくTopには書きましたが&amp;hellip;
普段AIやIoT関係の開発を行う弊社の社員が、技術から遊び、岩手での仕事の様子などあらゆるテーマについて自由に書く何でもブログです。
記事についてのコメントは#Defios_Labのハッシュタグで、TwitterやFacebookに投稿してもらえると嬉しいです。
― DefiosLab 所長 竹田 大将
This blog is written by an employee of Defios Corporation, an IT company that develops AI and IoT.
I write articles mainly about technology.
I also write articles about Iwate Prefecture in Japan, where the company&amp;rsquo;s office is located.
― Director of DefiosLaboratory Takeda Hiromasa</description>
    </item>
    
  </channel>
</rss>
